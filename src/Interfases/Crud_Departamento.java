/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfases;

import Clases.Departamento;
import Clases.Organizador;
import Clases.Personal;
import Clases.Tipos_Personales;
import Clases.Validaciones;
import base.ImpresionDeReportes;
import com.db4o.Db4o;
import com.db4o.ObjectContainer;
import com.db4o.ObjectSet;
import com.db4o.query.Query;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author eliza
 */
public class Crud_Departamento extends javax.swing.JPanel {

    private TableRowSorter trs;
    public static ArrayList<Departamento> listadepartamento = new ArrayList<>();

    public static ArrayList<Departamento> codigoseliminados = new ArrayList<>();

    public Crud_Departamento() {
        initComponents();
        ObjectContainer base = Db4o.openFile(Inicio.direccion);

        cargarTabla(base);

        base.close();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtNombreDepartamento = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescripcion = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableDatos = new javax.swing.JTable();
        btnGuardar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnReporte = new javax.swing.JButton();
        lblIdDepartamento = new javax.swing.JLabel();
        jButton12 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        cboxbusqueda = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/escritorio (1).png"))); // NOI18N
        jLabel1.setText("DEPARTAMENTOS");

        jLabel2.setText("Id Departamento: ");

        jLabel3.setText("Nombre de Departamento: ");

        jLabel4.setText("Descripción:");

        txtNombreDepartamento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreDepartamentoKeyTyped(evt);
            }
        });

        txtDescripcion.setColumns(20);
        txtDescripcion.setRows(5);
        txtDescripcion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDescripcionKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(txtDescripcion);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/lOGO1.png"))); // NOI18N

        jTableDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id Departamento", "Nombre de Departamento", "Descripción"
            }
        ));
        jScrollPane2.setViewportView(jTableDatos);

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/disco-flexible.png"))); // NOI18N
        btnGuardar.setText("GUARDAR");
        btnGuardar.setToolTipText("GUARDAR DEPARTAMENTO EN LA BASE");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/editar (1).png"))); // NOI18N
        btnModificar.setText("MODIFICAR");
        btnModificar.setToolTipText("MODIFICAR DEPARTAMENTO DE LA BASE");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/boton-eliminar (1).png"))); // NOI18N
        btnEliminar.setText("ELIMINAR");
        btnEliminar.setToolTipText("ELIMINAR DATOS DEL DEPARTAMENTO");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnReporte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/curriculum.png"))); // NOI18N
        btnReporte.setText("REPORTE");
        btnReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReporteActionPerformed(evt);
            }
        });

        jButton12.setBackground(new java.awt.Color(255, 255, 255));
        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/busqueda.png"))); // NOI18N
        jButton12.setBorder(null);
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jLabel12.setText("Filtro de busqueda");

        cboxbusqueda.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "Nombre" }));
        cboxbusqueda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cboxbusquedaMouseClicked(evt);
            }
        });
        cboxbusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxbusquedaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 408, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addComponent(jLabel5)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 840, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(48, 48, 48)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cboxbusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12))
                                .addGap(28, 28, 28))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(btnGuardar)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnModificar)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnEliminar)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnReporte))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(lblIdDepartamento, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(19, 19, 19)
                                        .addComponent(jButton12))
                                    .addComponent(txtNombreDepartamento, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel1)
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton12)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(lblIdDepartamento, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNombreDepartamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(52, 52, 52)
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cboxbusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardar)
                    .addComponent(btnModificar)
                    .addComponent(btnEliminar)
                    .addComponent(btnReporte))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // TODO add your handling code here:
        ObjectContainer base = Db4o.openFile(Inicio.direccion);

        ActualizarDatos(base);
        base.close();
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        ObjectContainer base = Db4o.openFile(Inicio.direccion);

        crearDepartamento(base);
        base.close();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReporteActionPerformed
        ImpresionDeReportes reporte = new ImpresionDeReportes(Login_Organizador.organizador);
        reporte.impresionDepartamento();

    }//GEN-LAST:event_btnReporteActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        ObjectContainer base = Db4o.openFile(Inicio.direccion);
        String codigoEliminar = JOptionPane.showInputDialog("Ingrese el código del Departamento");

        try {

            // public Personal(String codigo_perso, String Tipo_personal, String Departamento_p, String contanto_p, String Calificacion_p, Date Fecha_contrato_inicio, Date Fecha_contrato_fin, String cedula_perso, String cod_evento, String cod_organizador, String cedula, String nombre, String apellido, String telefono, String correo, String direccion, String celular, Date fecchaNaci, String genero) {
            Personal actividadAsociada = new Personal(null, codigoEliminar, null, null, null, null, null,null, null, null, null, null, null, null, null, null, null, null, null);
            ObjectSet resultActividad = base.get(actividadAsociada);

            if (resultActividad.size() > 0) {
                JOptionPane.showMessageDialog(this, "No se puede eliminar este Departamento porque está asociado a un Personal", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }

            Query queryPersonal = base.query();
            queryPersonal.constrain(Personal.class);
            queryPersonal.descend("id_tip_personal").constrain(codigoEliminar);

            ObjectSet<Personal> resultPersonal = queryPersonal.execute();

            if (resultPersonal.size() > 0) {
                JOptionPane.showMessageDialog(this, "No se puede eliminar el Departamento porque tiene a un personal asociada", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }

            Query queryDepartamento = base.query();
            queryDepartamento.constrain(Departamento.class);
            queryDepartamento.descend("id_departamento").constrain(codigoEliminar);

            ObjectSet<Departamento> resultDepartamento = queryDepartamento.execute();

            if (resultDepartamento.size() > 0) {
                int resul = JOptionPane.showConfirmDialog(null, "¿Deseas eliminar los datos del Departamento?", "Confirmación", JOptionPane.YES_NO_OPTION);

                if (resul == JOptionPane.YES_OPTION) {
                    for (Departamento departamento : resultDepartamento) {
                        base.delete(departamento);
                    }
                    JOptionPane.showMessageDialog(null, "Se han borrado los datos del Departamento");
                    cargarTabla(base);
                } else if (resul == JOptionPane.NO_OPTION) {
                    JOptionPane.showMessageDialog(null, "Datos del Departamento no eliminados");
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se encontró el código");
            }

            limpiar();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cargarTabla(base);
            base.close();
        }


    }//GEN-LAST:event_btnEliminarActionPerformed

    private void buscarActividad(ObjectContainer base) {
        String codigoBusqueda = JOptionPane.showInputDialog(this, "Ingrese el código del Departamento a buscar:", "Buscar Tipo de Departamento", JOptionPane.QUESTION_MESSAGE);

        if (codigoBusqueda != null && !codigoBusqueda.isEmpty()) {
            ObjectSet<Departamento> result = base.queryByExample(new Departamento(codigoBusqueda, null, null));

            if (!result.isEmpty()) {
                Departamento ubicacionEncontrada = result.next();
                lblIdDepartamento.setText(ubicacionEncontrada.getId_departamento());
                txtNombreDepartamento.setText(ubicacionEncontrada.getNombre());
                txtDescripcion.setText(ubicacionEncontrada.getDescripcion());
                limpiarTabla();
                DefaultTableModel model = (DefaultTableModel) jTableDatos.getModel();

                Object[] row = {
                    ubicacionEncontrada.getId_departamento(),
                    ubicacionEncontrada.getNombre(),
                    ubicacionEncontrada.getDescripcion(),};
                model.addRow(row);
                jTableDatos.setModel(model);
            } else {
                JOptionPane.showMessageDialog(this, "No se encontró ningun Departamento con el código ingresado.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        base.close();
    }

//    private void buscarActividad(ObjectContainer base) {
//        String codigoBusqueda = JOptionPane.showInputDialog(this, "Ingrese el código del Departamento a buscar:", "Buscar Actividad", JOptionPane.QUESTION_MESSAGE);
//
//        if (codigoBusqueda != null && !codigoBusqueda.isEmpty()) {
//            ObjectSet<Departamento> result = base.queryByExample(new Departamento(codigoBusqueda, null, null));
//
//            if (!result.isEmpty()) {
//                Departamento actividadEncontrada = result.next();
//                cargarDatosActividad(actividadEncontrada);
//                limpiarTabla();
//                cargarTabla(base, actividadEncontrada);
//            } else {
//                JOptionPane.showMessageDialog(this, "No se encontró ningun Departamento con el código ingresado.", "Error", JOptionPane.ERROR_MESSAGE);
//            }
//        }
//        base.close();
//    }
    private void limpiarTabla() {
        DefaultTableModel model = (DefaultTableModel) jTableDatos.getModel();
        model.setRowCount(0);
    }

    private void cargarTabla(ObjectContainer base, Departamento actividadFiltrada) {
        DefaultTableModel model = (DefaultTableModel) jTableDatos.getModel();

        Object[] row = {
            actividadFiltrada.getId_departamento(),
            actividadFiltrada.getNombre(),
            actividadFiltrada.getDescripcion(),};
        model.addRow(row);

        base.close();
    }

    private void cargarDatosActividad(Departamento actividad) {
        lblIdDepartamento.setText(actividad.getId_departamento());
        txtNombreDepartamento.setText(actividad.getNombre());
        txtDescripcion.setText(actividad.getDescripcion());

    }

    public void deshabilitarParametros() {
        lblIdDepartamento.setEnabled(false);
        txtNombreDepartamento.setEnabled(false);
        txtDescripcion.setEnabled(false);
    }

    private void habilitarCamposBusqueda(String criterioSeleccionado) {

        // Deshabilitar todos los campos de búsqueda
        deshabilitarParametros();
        // ...

        // Habilitar el campo de búsqueda correspondiente al criterio seleccionado
        if (criterioSeleccionado.equals("Nombre")) {
            txtNombreDepartamento.setEnabled(true);
            limpiarCamposPatrocinador();

        } else if (criterioSeleccionado.equals("Seleccione")) {
            lblIdDepartamento.setEnabled(true);
            txtNombreDepartamento.setEnabled(true);
            txtDescripcion.setEnabled(true);

        }

    }

    private void limpiarCamposPatrocinador() {

        lblIdDepartamento.setText("");
        txtNombreDepartamento.setText("");
        txtDescripcion.setText("");

    }


    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        ObjectContainer base = Db4o.openFile(Inicio.direccion);
        buscarActividad(base);
        base.close();
    }//GEN-LAST:event_jButton12ActionPerformed

    private void cboxbusquedaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cboxbusquedaMouseClicked

    }//GEN-LAST:event_cboxbusquedaMouseClicked

    private void cboxbusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxbusquedaActionPerformed

        // Obtener el criterio seleccionado del JComboBox
        String criterioSeleccionado = cboxbusqueda.getSelectedItem().toString();

        // Habilitar o deshabilitar los campos de búsqueda según el criterio seleccionado
        habilitarCamposBusqueda(criterioSeleccionado);
    }//GEN-LAST:event_cboxbusquedaActionPerformed

    public void Filtro() {

        if (cboxbusqueda.getSelectedItem().toString().equalsIgnoreCase("Nombre")) {
            int Columnastabla = 1;
            trs.setRowFilter(RowFilter.regexFilter(txtNombreDepartamento.getText().trim(), Columnastabla));

        }
    }


    private void txtNombreDepartamentoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreDepartamentoKeyTyped

        if (cboxbusqueda.getSelectedItem().toString().equalsIgnoreCase("Nombre")) {

            txtNombreDepartamento.addKeyListener(new KeyAdapter() {
                @Override
                public void keyReleased(final KeyEvent e) {

                    String cadena = (txtNombreDepartamento.getText());

                    txtNombreDepartamento.setText(cadena);
                    Filtro();

                }

            });

        }

        trs = new TableRowSorter(jTableDatos.getModel());
        jTableDatos.setRowSorter(trs);

        char letra = evt.getKeyChar();

// Verificar si es una letra y si es la primera letra
        if (Character.isLetter(letra) && txtNombreDepartamento.getText().trim().isEmpty()) {
            // Convertir la letra a mayúscula y agregarla al texto existente
            txtNombreDepartamento.setText(String.valueOf(Character.toUpperCase(letra)));
            evt.consume();  // Consumir el evento para evitar que la letra original se muestre
        } else if (Character.isLetter(letra) || Character.isSpaceChar(letra)) {
            // Verificar si es letra o espacio y agregar al texto en minúscula
            txtNombreDepartamento.setText(txtNombreDepartamento.getText() + Character.toLowerCase(letra));
            evt.consume();
        } else {
            evt.consume();
        }

// Limitar la longitud del texto a 20 caracteres
        if (txtNombreDepartamento.getText().length() > 19) {
            evt.consume();
        }


    }//GEN-LAST:event_txtNombreDepartamentoKeyTyped

    private void txtDescripcionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescripcionKeyTyped
        char letra = evt.getKeyChar();

// Verificar si es una letra y si es la primera letra
        if (Character.isLetter(letra) && txtDescripcion.getText().trim().isEmpty()) {
            // Convertir la letra a mayúscula y agregarla al texto existente
            txtDescripcion.setText(String.valueOf(Character.toUpperCase(letra)));
            evt.consume();  // Consumir el evento para evitar que la letra original se muestre
        } else if (Character.isLetter(letra) || Character.isSpaceChar(letra)) {
            // Verificar si es letra o espacio y agregar al texto en minúscula
            txtDescripcion.setText(txtDescripcion.getText() + Character.toLowerCase(letra));
            evt.consume();
        } else {
            evt.consume();
        }

// Limitar la longitud del texto a 20 caracteres
        if (txtDescripcion.getText().length() > 80) {
            evt.consume();
        }
        
    }//GEN-LAST:event_txtDescripcionKeyTyped

    public void ActualizarDatos(ObjectContainer base) {
        if (txtNombreDepartamento.getText().trim().isEmpty() || txtDescripcion.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor llene en el campo del Codigo para la Modificacion", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            Departamento miubi = new Departamento(lblIdDepartamento.getText().trim(), null, null);
            ObjectSet res = base.get(miubi);
            Departamento miubipersonal = (Departamento) res.next();
            miubipersonal.setNombre(txtNombreDepartamento.getText().trim());
            miubipersonal.setDescripcion(txtDescripcion.getText().trim());

            base.set(miubipersonal);

            JOptionPane.showMessageDialog(this, "Modificación exitosa");
            cargarTabla(base);
            limpiar();

        } finally {
            base.close();
        }

    }

//    public void modificarDepartamento(ObjectContainer base) {
//        int filaSeleccionada = jTableDatos.getSelectedRow();
//
//        if (filaSeleccionada != -1) {
//            // Obtener el código del departamento seleccionado en la tabla
//            String codigoModificar = jTableDatos.getValueAt(filaSeleccionada, 0).toString();
//
//            try {
//                // Realizar la búsqueda en la base de datos
//                Query query = base.query();
//                query.constrain(Departamento.class);
//                query.descend("id_departamento").constrain(codigoModificar);
//                ObjectSet<Departamento> result = query.execute();
//
//                if (!result.isEmpty()) {
//                    // Solo tomará el primer resultado si hay más de uno (debería haber solo uno)
//                    Departamento depar = result.get(0);
//
//                    // Cargar los datos del departamento en los campos correspondientes
//                    lblIdDepartamento.setEnabled(false);
//                    lblIdDepartamento.setText(depar.getId_departamento());
//                    txtNombreDepartamento.setText(depar.getNombre());
//                    txtDescripcion.setText(depar.getDescripcion());
//                } else {
//                    JOptionPane.showMessageDialog(null, "No se encontró el departamento en la base de datos.");
//                }
//            } finally {
//                // No cierres la base de datos aquí; déjalo abierto para que puedas usarlo en el método que llama a modificarDepartamento
//            }
//        } else {
//            JOptionPane.showMessageDialog(null, "No has seleccionado ninguna fila.");
//        }
//    }
    public void confirmarModificacion(ObjectContainer base) {
        int filaSeleccionada = jTableDatos.getSelectedRow();

        if (filaSeleccionada != -1) {
            String codigoModificar = jTableDatos.getValueAt(filaSeleccionada, 0).toString();

            try {
                Query query = base.query();
                query.constrain(Departamento.class);
                query.descend("id_departamento").constrain(codigoModificar);
                ObjectSet<Departamento> result = query.execute();

                if (!result.isEmpty()) {
                    Departamento departamento = result.get(0);

                    int confirmacion = JOptionPane.showConfirmDialog(null, "¿Estás seguro de modificar el departamento?", "Confirmación", JOptionPane.YES_NO_OPTION);

                    if (confirmacion == JOptionPane.YES_OPTION) {
                        // Modificar los datos del departamento en la base de datos
                        lblIdDepartamento.setEnabled(false);
                        departamento.setNombre(txtNombreDepartamento.getText());
                        departamento.setDescripcion(txtDescripcion.getText());

                        base.store(departamento); // Actualizar el objeto en la base de datos

                        JOptionPane.showMessageDialog(null, "Departamento modificado correctamente");
                        RefrescarTabla(base);
                        limpiar();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "No se encontró el departamento en la base de datos.");
                }
            } finally {
                // No cierres la base de datos aquí; déjalo abierto para que puedas usarlo en otras partes del código
            }
        } else {
            JOptionPane.showMessageDialog(null, "No has seleccionado ninguna fila.");
        }
    }

    public void RefrescarTabla(ObjectContainer base) {
        DefaultTableModel model = (DefaultTableModel) jTableDatos.getModel();
        model.setRowCount(0);

        Query query = base.query();
        query.constrain(Departamento.class);
        ObjectSet<Departamento> result = query.execute();

        for (Departamento departamento : result) {
            // Crear un arreglo para los datos de cada departamento
            Object[] a = new Object[3];
            // Obtener los datos del departamento actual y agregarlos al arreglo
            a[0] = departamento.getId_departamento();
            a[1] = departamento.getNombre();
            a[2] = departamento.getDescripcion();
            // Agregar el arreglo de datos como una fila en el modelo de la tabla
            model.addRow(a);
        }
        // No es necesario establecer el modelo nuevamente en la tabla
    }

    public void crearDepartamento(ObjectContainer Base) {
        // Verificar si todos los campos están llenos
        if (!validarCampos()) {
            JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {

            ObjectSet<Departamento> resul = Base.queryByExample(new Departamento(null, null, null));
            int ultimoCodigo = resul.size() + 1;

            // Formatear el código con ceros a la izquierda
            String cod = String.format("DEP-%03d", ultimoCodigo);
            lblIdDepartamento.setText(cod);

            // Verificar si ya existe una casa con el mismo código
            resul = Base.queryByExample(new Departamento(cod, null, null));

            if (!resul.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Ya existe un departamento con el código ingresado.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Crear objeto CasaVacacional y almacenar en la base de datos
            Departamento casa1 = new Departamento(lblIdDepartamento.getText().trim(), txtNombreDepartamento.getText().trim(), txtDescripcion.getText().trim());

            Base.store(casa1);

            JOptionPane.showMessageDialog(this, "Departamento creado exitosamente");
            limpiar();
            cargarTabla(Base);
        } finally {
            Base.close();
        }
    }

    public boolean validarCampos() {
        Validaciones miValidaciones = new Validaciones();
        boolean ban_confirmar = true;

        if (txtNombreDepartamento.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese el nombre del cliente");
            ban_confirmar = false;
        } else if (!miValidaciones.validarDireccion(txtNombreDepartamento.getText())) {
            JOptionPane.showMessageDialog(this, "Nombre incorrecto. Ingrese de nuevo");
            ban_confirmar = false;
        }
        if (txtDescripcion.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese la descripción del cliente");
            ban_confirmar = false;
        } else if (!miValidaciones.validarDireccion(txtDescripcion.getText())) {
            JOptionPane.showMessageDialog(this, "Descripción incorrecta. Ingrese de nuevo");
            ban_confirmar = false;
        }

        return ban_confirmar;
    }

    public void limpiar() {
        txtNombreDepartamento.setText("");
        txtDescripcion.setText("");

    }

    public void cargarTabla(ObjectContainer base) {

        DefaultTableModel model = (DefaultTableModel) jTableDatos.getModel();
        model.setRowCount(0); // Limpiar la tabla antes de cargar los datos

        ObjectSet<Departamento> result = base.queryByExample(new Departamento());

        while (result.hasNext()) {
            Departamento departamento = result.next();

            Object[] row = {
                departamento.getId_departamento(),
                departamento.getNombre(),
                departamento.getDescripcion(),};
            model.addRow(row);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnReporte;
    private javax.swing.JComboBox<String> cboxbusqueda;
    private javax.swing.JButton jButton12;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTableDatos;
    private javax.swing.JLabel lblIdDepartamento;
    private javax.swing.JTextArea txtDescripcion;
    private javax.swing.JTextField txtNombreDepartamento;
    // End of variables declaration//GEN-END:variables
}
