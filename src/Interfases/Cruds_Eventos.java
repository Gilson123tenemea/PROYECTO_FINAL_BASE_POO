/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfases;

import Clases.Evento;
import Clases.Patrocinador;
import Clases.Tipo_evento;
import com.db4o.Db4o;
import com.db4o.ObjectContainer;
import com.db4o.ObjectSet;
import com.db4o.query.Query;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Date;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author eliza
 */
public class Cruds_Eventos extends javax.swing.JPanel {

    Boolean primeraMayusculaIngresada;
    String horai = " ", horafinal = " ", cod = " ";

    byte[] foto;

    int longitudBytes;

    public Cruds_Eventos() {
        initComponents();
        cargarPatrocinadores();
        cargar();
        txtinicio.setVisible(false);
        txtfinal.setVisible(false);
        btnguardar.setEnabled(false);
        numpuestosspn.setModel(new SpinnerNumberModel(0, 0, 100, 1));
        txtorga.setText(Login_Organizador.cod_orga);
        txtciudad.setEnabled(false);
        txtcalle.setEditable(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtnombre = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jdtinicio = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txadescripcion = new javax.swing.JTextArea();
        btnguardar = new javax.swing.JButton();
        btnmodificar = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        cbxubicacion = new javax.swing.JComboBox<>();
        tmreloj = new com.raven.swing.TimePicker();
        btnin = new javax.swing.JButton();
        btnfin = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtinicio = new javax.swing.JTextField();
        txtfinal = new javax.swing.JTextField();
        cbxtipo = new javax.swing.JComboBox<>();
        cboxpatrocinador = new javax.swing.JComboBox<>();
        fotolbl = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        numpuestosspn = new javax.swing.JSpinner();
        jTextField1 = new javax.swing.JTextField();
        txtorga = new javax.swing.JLabel();
        txtciudad = new javax.swing.JTextField();
        txtcalle = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(911, 626));
        setPreferredSize(new java.awt.Dimension(911, 626));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/presentacion.png"))); // NOI18N
        jLabel1.setText("EVENTOS");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, -1, -1));

        jLabel3.setText("Nombre: ");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(45, 115, -1, -1));

        jLabel4.setText("Tipo de Evento: ");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 205, -1, -1));

        txtnombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtnombreKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtnombreKeyTyped(evt);
            }
        });
        jPanel1.add(txtnombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(114, 112, 151, -1));

        jLabel5.setText("Fecha de Inicio: ");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 417, -1, -1));

        jdtinicio.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jdtinicioPropertyChange(evt);
            }
        });
        jPanel1.add(jdtinicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(114, 417, 151, -1));

        jLabel7.setText("Fecha de Fin:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 471, -1, -1));

        jDateChooser2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooser2PropertyChange(evt);
            }
        });
        jPanel1.add(jDateChooser2, new org.netbeans.lib.awtextra.AbsoluteConstraints(114, 471, 139, -1));

        jLabel9.setText("Descripción:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(352, 369, -1, -1));

        txadescripcion.setColumns(20);
        txadescripcion.setRows(5);
        txadescripcion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txadescripcionKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txadescripcionKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(txadescripcion);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(333, 397, 200, 60));

        btnguardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/disco-flexible.png"))); // NOI18N
        btnguardar.setText("GUARDAR");
        btnguardar.setToolTipText("Crear un nuevo registro");
        btnguardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnguardarActionPerformed(evt);
            }
        });
        jPanel1.add(btnguardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(301, 500, -1, -1));

        btnmodificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/editar (1).png"))); // NOI18N
        btnmodificar.setText("MODIFICAR");
        btnmodificar.setToolTipText("Sirve para modificar algun campo de un registro");
        btnmodificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnmodificarActionPerformed(evt);
            }
        });
        jPanel1.add(btnmodificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(513, 500, -1, -1));

        jButton4.setBackground(new java.awt.Color(255, 255, 255));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/busqueda.png"))); // NOI18N
        jButton4.setToolTipText("Ayuda a buscar por medio del nombre los datos");
        jButton4.setBorder(null);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(283, 112, -1, -1));

        jLabel14.setText("Código Ubicación:");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, -1, -1));

        cbxubicacion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "Azuay", "Bolivar", "Cañar", "Carchi", "Chimborazo", "Cotopaxi", "El Oro", "Esmeraldas", "Galápagos", "Guayanas", "Imbabura", "Loja", "Los Ríos", "Manabí", "Morona Santiago", "Napo", "Sucumbíos", "Pastaza", "Pinchincha", "Santa Elena", "Santo Domingo", "Francisco De Orellana", "Tungurahua", "Zamora Chinchipe" }));
        cbxubicacion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxubicacionItemStateChanged(evt);
            }
        });
        cbxubicacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cbxubicacionMouseClicked(evt);
            }
        });
        jPanel1.add(cbxubicacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(114, 297, 151, -1));

        tmreloj.setForeground(new java.awt.Color(51, 102, 255));
        tmreloj.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tmrelojMouseClicked(evt);
            }
        });
        jPanel1.add(tmreloj, new org.netbeans.lib.awtextra.AbsoluteConstraints(651, 95, 193, 292));

        btnin.setText("Hora de inicio");
        btnin.setToolTipText("Sirve para establecer la hora que va a finalizar el evento");
        btnin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btninActionPerformed(evt);
            }
        });
        jPanel1.add(btnin, new org.netbeans.lib.awtextra.AbsoluteConstraints(611, 449, 122, -1));

        btnfin.setText("Hora de fin");
        btnfin.setToolTipText("Sirve para establecer la hora que va a comenzar el evento");
        btnfin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnfinActionPerformed(evt);
            }
        });
        jPanel1.add(btnfin, new org.netbeans.lib.awtextra.AbsoluteConstraints(761, 449, 120, -1));

        jLabel6.setText("Establece la hora:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 50, 124, 28));

        jLabel8.setText("Patrocinador:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 167, -1, -1));

        txtinicio.setEditable(false);
        txtinicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtinicioActionPerformed(evt);
            }
        });
        jPanel1.add(txtinicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(611, 411, 122, -1));

        txtfinal.setEditable(false);
        txtfinal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfinalActionPerformed(evt);
            }
        });
        jPanel1.add(txtfinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(761, 411, 120, -1));

        cbxtipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione" }));
        cbxtipo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxtipoItemStateChanged(evt);
            }
        });
        cbxtipo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cbxtipoMouseClicked(evt);
            }
        });
        cbxtipo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cbxtipoKeyReleased(evt);
            }
        });
        jPanel1.add(cbxtipo, new org.netbeans.lib.awtextra.AbsoluteConstraints(114, 202, 151, -1));

        cboxpatrocinador.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione" }));
        cboxpatrocinador.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboxpatrocinadorItemStateChanged(evt);
            }
        });
        cboxpatrocinador.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cboxpatrocinadorMouseClicked(evt);
            }
        });
        jPanel1.add(cboxpatrocinador, new org.netbeans.lib.awtextra.AbsoluteConstraints(114, 164, 151, -1));

        fotolbl.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 1, 1, 1, new java.awt.Color(0, 0, 0)));
        jPanel1.add(fotolbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(338, 93, 258, 265));

        jButton2.setText("Selecciona una foto");
        jButton2.setToolTipText("Debe seleccionar una imagen que desee subir al sistema");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(338, 52, 164, -1));

        jLabel2.setText("Precio:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(56, 236, -1, -1));

        jLabel10.setText("Numero puestos:");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 262, -1, -1));
        jPanel1.add(numpuestosspn, new org.netbeans.lib.awtextra.AbsoluteConstraints(114, 259, -1, -1));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });
        jPanel1.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(114, 233, 142, -1));

        txtorga.setBackground(new java.awt.Color(255, 255, 255));
        txtorga.setForeground(new java.awt.Color(255, 255, 255));
        txtorga.setText("jLabel11");
        jPanel1.add(txtorga, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 544, -1, -1));
        jPanel1.add(txtciudad, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 363, 104, -1));
        jPanel1.add(txtcalle, new org.netbeans.lib.awtextra.AbsoluteConstraints(147, 363, 118, -1));

        jLabel13.setText("Ciudad:");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 343, -1, -1));

        jLabel15.setText("Calle Principa:l");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(147, 343, -1, -1));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cboxpatrocinadorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cboxpatrocinadorMouseClicked
        cargarPatrocinadores();        // TODO add your handling code here:
    }//GEN-LAST:event_cboxpatrocinadorMouseClicked

    private void cbxtipoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbxtipoMouseClicked
        // TODO add your handling code here:
        cargar();
    }//GEN-LAST:event_cbxtipoMouseClicked

    private void txtfinalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfinalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfinalActionPerformed

    private void txtinicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtinicioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtinicioActionPerformed

    private void btnfinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnfinActionPerformed
        horafinal = tmreloj.getSelectedTime();
        JOptionPane.showMessageDialog(null, "Hora final: " + horafinal);
        validar();
    }//GEN-LAST:event_btnfinActionPerformed

    private void btninActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btninActionPerformed
        horai = tmreloj.getSelectedTime();
        JOptionPane.showMessageDialog(null, "Hora de Inicio: " + horai);
        validar();

    }//GEN-LAST:event_btninActionPerformed

    private LocalDateTime convertirFechaLocalDateTime(Date fecha, String hora) {
        Instant instant = fecha.toInstant();
        ZoneId zoneId = ZoneId.systemDefault();
        LocalDateTime localDateTime = instant.atZone(zoneId).toLocalDateTime();
        return localDateTime.withHour(Integer.parseInt(hora.split(":")[0])).withMinute(Integer.parseInt(hora.split(":")[1]));
    }

    private void tmrelojMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tmrelojMouseClicked

    }//GEN-LAST:event_tmrelojMouseClicked

    private void btnmodificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnmodificarActionPerformed
        // TODO add your handling code here:

        ObjectContainer base = Db4o.openFile(Inicio.direccion);

        ActualizarDatos(base);

        base.close();
    }//GEN-LAST:event_btnmodificarActionPerformed

    private void btnguardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnguardarActionPerformed
        // TODO add your handling code here:

        ObjectContainer base = Db4o.openFile(Inicio.direccion);
        CrearEvento(base);
        base.close();
    }//GEN-LAST:event_btnguardarActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        try {

            JFileChooser se = new JFileChooser();
            se.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int estado = se.showOpenDialog(null);
            if (estado == JFileChooser.APPROVE_OPTION) {

                try {
                    File archivo = se.getSelectedFile();
                    this.longitudBytes = (int) archivo.length();

                    // Leer la imagen seleccionada como bytes
                    byte[] buffer = new byte[this.longitudBytes];
                    try (FileInputStream fis = new FileInputStream(archivo)) {
                        fis.read(buffer);
                    }

                    // Mostrar la imagen en el JLabel
                    Image icono = ImageIO.read(archivo).getScaledInstance(fotolbl.getWidth(), fotolbl.getHeight(), Image.SCALE_DEFAULT);
                    fotolbl.setIcon(new ImageIcon(icono));
                    fotolbl.updateUI();

                    // Asignar los bytes de la imagen a la variable "foto"
                    foto = buffer;
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, " No se selecciono una imagen ");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:

        btnguardar.setEnabled(false);
        txtinicio.setVisible(true);
        txtfinal.setVisible(true);

        ObjectContainer base = Db4o.openFile(Inicio.direccion);

        String nombre = " ", tipo = " ", descripcion = " ", patrocinador = " ", horain = " ", horaf = " ";
        Date fechai = null, fechaf = null;
        byte[] foto1;
        int ed = 0;
        Query query = base.query();
        query.constrain(Evento.class);
        query.descend("nombre").constrain(txtnombre.getText().trim());
        ObjectSet<Evento> result = query.execute();

        if (!result.isEmpty()) {

            for (Evento evento1 : result) {
                descripcion = evento1.getDescripcion();
                patrocinador = evento1.getCodigo_patrocinador();
                fechai = evento1.getFecha_inicio();
                fechaf = evento1.getFecha_fin();

                horain = evento1.getHora_inicio();
                horaf = evento1.getHora_fin();
                foto1 = evento1.getData();
                if (foto1 != null) {
                    ImageIcon icono = new ImageIcon(foto1);
                    fotolbl.setIcon(icono);

                }

            }
            txadescripcion.setText(descripcion.trim());

            jdtinicio.setDate(fechai);
            jDateChooser2.setDate(fechaf);
            txtinicio.setText(horain);
            txtfinal.setText(horaf);

            Deshabilitar();

            int res = JOptionPane.showConfirmDialog(null, "Desea modificar los datos del evento", "confirmacion", JOptionPane.YES_NO_OPTION);
            if (res == JOptionPane.YES_OPTION) {

                btnguardar.setEnabled(false);

                btnmodificar.setEnabled(true);
                habilitar();

            } else if (res == JOptionPane.NO_OPTION) {
                limpiar();
                JOptionPane.showMessageDialog(null, "Se cancelo la modificacion de datos");
                btnguardar.setEnabled(true);
            }

            // lblcod.setText(cod.trim());
        } else {

            JOptionPane.showMessageDialog(null, "No se encontró ningún evento con el codigo ingresado");

        }

        base.close();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void txtnombreKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtnombreKeyReleased
        // TODO add your handling code here:
        validar();
    }//GEN-LAST:event_txtnombreKeyReleased

    private void txadescripcionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txadescripcionKeyReleased
        // TODO add your handling code here:
        validar();
    }//GEN-LAST:event_txadescripcionKeyReleased

    private void cboxpatrocinadorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboxpatrocinadorItemStateChanged
        // TODO add your handling code here:
        validar();
    }//GEN-LAST:event_cboxpatrocinadorItemStateChanged

    private void cbxtipoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbxtipoKeyReleased
        // TODO add your handling code here:

    }//GEN-LAST:event_cbxtipoKeyReleased

    private void cbxtipoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxtipoItemStateChanged
        // TODO add your handling code here:
        validar();
    }//GEN-LAST:event_cbxtipoItemStateChanged

    private void cbxubicacionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxubicacionItemStateChanged
        // TODO add your handling code here:
        validar();
    }//GEN-LAST:event_cbxubicacionItemStateChanged

    private void jdtinicioPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jdtinicioPropertyChange
        // TODO add your handling code here:
        validar();
    }//GEN-LAST:event_jdtinicioPropertyChange

    private void jDateChooser2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooser2PropertyChange
        // TODO add your handling code here:
        validar();
    }//GEN-LAST:event_jDateChooser2PropertyChange

    private void txtnombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtnombreKeyTyped

        char c = evt.getKeyChar();
        String textoActual = txtnombre.getText();

        if ((!Character.isLetter(c) && c != ' ') || (Character.isLowerCase(c) && textoActual.length() >= 20)) {
            evt.consume();
        } else if (textoActual.length() == 0 || (Character.isWhitespace(textoActual.charAt(textoActual.length() - 1)))) {
            evt.setKeyChar(Character.toUpperCase(c));
        }

    }//GEN-LAST:event_txtnombreKeyTyped

    private void txadescripcionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txadescripcionKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txadescripcionKeyTyped

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped

        char c = evt.getKeyChar();
        if (!Character.isDigit(c) || jTextField1.getText().length() >= 3) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextField1KeyTyped

    private void cbxubicacionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbxubicacionMouseClicked
        txtciudad.setEnabled(true);
        txtcalle.setEditable(true);
    }//GEN-LAST:event_cbxubicacionMouseClicked

    private byte[] obtenerBytesImagen() {
        JFileChooser se = new JFileChooser();
        se.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int estado = se.showOpenDialog(null);
        if (estado == JFileChooser.APPROVE_OPTION) {
            try {
                File archivo = se.getSelectedFile();
                this.longitudBytes = (int) archivo.length();

                // Leer la imagen seleccionada como bytes
                byte[] buffer = new byte[this.longitudBytes];
                try (FileInputStream fis = new FileInputStream(archivo)) {
                    fis.read(buffer);
                }

                // Mostrar la imagen en un JLabel (opcional, solo para visualización)
                Image icono = ImageIO.read(archivo).getScaledInstance(fotolbl.getWidth(), fotolbl.getHeight(), Image.SCALE_DEFAULT);
                fotolbl.setIcon(new ImageIcon(icono));
                fotolbl.updateUI();

                return buffer;
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        return null;
    }

// Método que invoca obtenerBytesImagen() y asigna el arreglo de bytes a la variable "foto"
    public void seleccionarImagen() {
        foto = obtenerBytesImagen();
    }

    public void cargar() {
        ObjectContainer base = Db4o.openFile(Inicio.direccion);

        try {
            cbxtipo.removeAllItems();
            Query query = base.query();
            query.constrain(Tipo_evento.class);

            ObjectSet<Tipo_evento> eventos = query.execute();

            cbxtipo.addItem("Seleccione");
            while (eventos.hasNext()) {
                Tipo_evento tipoEvento = eventos.next();
                cbxtipo.addItem(tipoEvento.toString());  // Añade el objeto tipoEvento al ComboBox
            }
        } finally {
            base.close();
        }
    }

    public void CrearEvento(ObjectContainer bd) {
        if (!validarCamposObligatorios()) {
            JOptionPane.showMessageDialog(null, "Por favor llene todos los campos antes de ingresar", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            ObjectSet<Evento> resul = bd.queryByExample(new Evento(null, null, null, null, null, null, null, null, null, null, null, 0.0, 0, null, null, null, null));
            int ultimoCodigo = resul.size() + 1;
            String codi = String.format("EVE-%03d", ultimoCodigo);

            if (jdtinicio.getDate() == null || jDateChooser2.getDate() == null || jdtinicio.getDate().after(jDateChooser2.getDate())) {
                JOptionPane.showMessageDialog(null, "La fecha de inicio debe ser anterior a la fecha de fin", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            validar();

            String nombreEvento = txtnombre.getText().trim();
            ObjectSet<Evento> result = bd.queryByExample(new Evento(null, nombreEvento, null, null, null, null, null, null, null, null, null, 0.0, 0, null, null, null, null));

            if (!result.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Ya existe un evento con el mismo nombre, ingresa uno nuevo.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            ObjectSet<Evento> eventosExistentes = bd.queryByExample(
                    new Evento(null, nombreEvento, null, null, null, null, null, null, null, null, null, 0.0, 0, null, null, null, null));

            for (Evento eventoExistente : eventosExistentes) {
                if (fechasCoinciden(eventoExistente)) {
                    JOptionPane.showMessageDialog(this, "Ya existe un evento con el mismo nombre en estas fechas.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            String codigoTipoEvento = obtenerCodigoTipoEventoSeleccionado();
            int numpuestos = (int) numpuestosspn.getValue();
            String codigoPatrocinador = obtenerCodigoPatrocinadorSeleccionado();

            Evento evento1 = new Evento(codi,
                    nombreEvento,
                    txadescripcion.getText().trim(),
                    codigoPatrocinador,
                    null,
                    codigoTipoEvento.toLowerCase(),
                    jdtinicio.getDate(),
                    jDateChooser2.getDate(),
                    horai.toLowerCase(),
                    horafinal,
                    foto,
                    Double.valueOf(jTextField1.getText()),
                    numpuestos,
                    txtorga.getText().trim(),
                    cbxubicacion.getSelectedItem().toString(),
                    txtciudad.getText().trim(),
                    txtcalle.getText().trim()
            );

            System.out.println(evento1);

            bd.store(evento1);

            JOptionPane.showMessageDialog(null, "Se ha guardado el evento exitosamente");

            limpiar();
        } finally {
            bd.close();
        }
    }

    private boolean fechasCoinciden(Evento eventoExistente) {
        LocalDate nuevaFechaInicio = jdtinicio.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        LocalDate nuevaFechaFin = jDateChooser2.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

        LocalDate existenteFechaInicio = eventoExistente.getFecha_inicio().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        LocalDate existenteFechaFin = eventoExistente.getFecha_fin().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

        // Verificar si las fechas coinciden
        return (nuevaFechaInicio.isEqual(existenteFechaInicio) || nuevaFechaInicio.isAfter(existenteFechaInicio))
                && (nuevaFechaInicio.isEqual(existenteFechaFin) || nuevaFechaInicio.isBefore(existenteFechaFin))
                || (nuevaFechaFin.isEqual(existenteFechaInicio) || nuevaFechaFin.isAfter(existenteFechaInicio))
                && (nuevaFechaFin.isEqual(existenteFechaFin) || nuevaFechaFin.isBefore(existenteFechaFin));
    }

    private boolean validarCamposObligatorios() {
        return !txtnombre.getText().trim().isEmpty()
                && cboxpatrocinador.getSelectedItem() != null
                && obtenerCodigoTipoEventoSeleccionado() != null
                && jdtinicio.getDate() != null
                && jDateChooser2.getDate() != null
                && !horai.trim().isEmpty()
                && !horafinal.trim().isEmpty()
                && !jTextField1.getText().trim().isEmpty();
    }

// Método para obtener el código del tipo de evento seleccionado en el ComboBox
    private String obtenerCodigoTipoEventoSeleccionado() {
        String tipoEventoSeleccionado = cbxtipo.getSelectedItem().toString();

        // Asumiendo que el código del tipo de evento está al principio del string antes del espacio
        String[] partes = tipoEventoSeleccionado.split(" ");

        if (partes.length > 0) {
            return partes[0];
        } else {
            return "";  // Puedes ajustar esto según la estructura real de tu ComboBox
        }
    }

    private String obtenerCodigoPatrocinadorSeleccionado() {
        String patrocinadorSeleccionado = cboxpatrocinador.getSelectedItem().toString();

        // Asumiendo que el código del patrocinador está al principio del string antes del espacio
        String[] partes = patrocinadorSeleccionado.split(" ");

        if (partes.length > 0) {
            return partes[0];
        } else {
            return "";  // Puedes ajustar esto según la estructura real de tu ComboBox
        }
    }

    public void validar() {

        if (!txtnombre.getText().trim().isEmpty() || !txadescripcion.getText().trim().isEmpty() || jdtinicio.getDate() != null || jdtinicio.getDate() != null || cbxtipo.getSelectedItem() != "Seleccione" || cbxubicacion.getSelectedItem() != "Seleccione" || cboxpatrocinador.getSelectedItem() != "Seleccione" || !btnin.getModel().isPressed() || btnfin.getModel().isPressed()) {

            btnguardar.setEnabled(true);
        } else {
            btnguardar.setEnabled(false);
        }
    }

    public void ActualizarDatos(ObjectContainer base) {
        try {
            Evento miagente = new Evento(null, null, null, null, null, null, null, null, null, null, null, 0.0, 0, null, null, null, null);

            ObjectSet<Evento> res = base.get(miagente);
            if (!res.isEmpty()) {
                Evento mievento1 = res.next();

                mievento1.setNombre(txtnombre.getText().trim());
                mievento1.setDescripcion(txadescripcion.getText().trim());
                mievento1.setTipo(cbxtipo.getSelectedItem().toString());
                mievento1.setCodigo_patrocinador(cboxpatrocinador.getSelectedItem().toString());
                mievento1.setFecha_inicio(jdtinicio.getDate());
                mievento1.setHora_inicio(horai);
                mievento1.setFecha_fin(jDateChooser2.getDate());
                mievento1.setHora_fin(horafinal);
                mievento1.setProvincia(cbxubicacion.getSelectedItem().toString());
                mievento1.setCiudad(txtciudad.getText().trim());
                mievento1.setCalle(txtcalle.getText().trim());
                base.store(mievento1);
                JOptionPane.showMessageDialog(this, "Modificación exitosa");
                limpiar();
            } else {
                JOptionPane.showMessageDialog(this, "Evento no encontrado", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } finally {
            base.close();
        }
    }

    public void limpiar() {
        txtnombre.setText(" ");
        txadescripcion.setText(" ");
        jdtinicio.setDate(null);
        jDateChooser2.setDate(null);
        tmreloj.setToolTipText("12:00 AM");
        fotolbl.setIcon(new ImageIcon(new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)));
        cbxtipo.setSelectedItem("Seleccione");
        cbxubicacion.setSelectedItem("Seleccione");
        cboxpatrocinador.setSelectedItem("Seleccione");
        jTextField1.setText("");
        numpuestosspn.setValue(0);
        txtorga.setText("");
        txtciudad.setText("");
        txtcalle.setText("");

    }

    public void Deshabilitar() {
        cboxpatrocinador.setEnabled(false);
        txadescripcion.setEnabled(false);
        txtnombre.setEnabled(false);
        cbxtipo.setEnabled(false);
        jdtinicio.setEnabled(false);
        jDateChooser2.setEnabled(false);
        btnin.setEnabled(false);
        btnfin.setEnabled(false);
        cbxubicacion.setEnabled(false);
    }

    public void habilitar() {
        cboxpatrocinador.setEnabled(true);
        txadescripcion.setEnabled(true);
        txtnombre.setEnabled(true);
        cbxtipo.setEnabled(true);
        jdtinicio.setEnabled(true);
        jDateChooser2.setEnabled(true);
        btnin.setEnabled(true);
        btnfin.setEnabled(true);
        cbxubicacion.setEnabled(true);

    }

    private void mostrarDatosPatrocinadores() {

        ObjectContainer bases = Db4o.openFile(Inicio.direccion);

        try {
            Object selectedItem = cboxpatrocinador.getSelectedItem();

            if (selectedItem != null) {
                String cedulaSeleccionada = selectedItem.toString();

                Query query = bases.query();
                query.constrain(Patrocinador.class);
                query.descend("codigo_patri").constrain(cedulaSeleccionada);
                ObjectSet<Patrocinador> result = query.execute();

                if (!result.isEmpty()) {
                    Patrocinador patro = result.next();
                    Date fecha = patro.getFecchaNaci();
                    SimpleDateFormat sfd = new SimpleDateFormat("dd/MM/yyyy");
                    String Fecha = sfd.format(fecha);
                    String mensaje = "Cédula: " + patro.getCedula() + "\n"
                            + "Nombre: " + patro.getNombre() + "\n"
                            + "Apellido: " + patro.getApellido() + "\n"
                            + "Telefono: " + patro.getTelefono() + "\n"
                            + "Email: " + patro.getCorreo() + "\n"
                            + "Direccion: " + patro.getDireccion() + "\n"
                            + "Genero: " + patro.getGenero() + "\n"
                            + "Fecha de Nacimiento: " + Fecha + "\n"
                            + "Redes Sociales: " + patro.getRedes_sociales() + "\n"
                            + "Descripcion: " + patro.getDescripcion_p();

                    JOptionPane.showMessageDialog(this, mensaje, "Datos del Patrocinador", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró un Patrocinador con el codigo seleccionado.", "Patrocinador no encontrado", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No se ha seleccionado ningún código.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al mostrar datos del Patrocinador.", "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            bases.close();
        }
    }

    public void cargarPatrocinadores() {
        ObjectContainer base = Db4o.openFile(Inicio.direccion);

        try {
            cboxpatrocinador.removeAllItems();
            Query query = base.query();
            query.constrain(Patrocinador.class);

            ObjectSet<Patrocinador> eventos = query.execute();

            cboxpatrocinador.addItem("Seleccione");
            while (eventos.hasNext()) {
                Patrocinador tipoEvento = eventos.next();
                cboxpatrocinador.addItem(tipoEvento.toString());  // Añade el objeto tipoEvento al ComboBox
            }
        } finally {
            base.close();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnfin;
    private javax.swing.JButton btnguardar;
    private javax.swing.JButton btnin;
    private javax.swing.JButton btnmodificar;
    private javax.swing.JComboBox<String> cboxpatrocinador;
    private javax.swing.JComboBox<String> cbxtipo;
    private javax.swing.JComboBox<String> cbxubicacion;
    private javax.swing.JLabel fotolbl;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private com.toedter.calendar.JDateChooser jdtinicio;
    private javax.swing.JSpinner numpuestosspn;
    private com.raven.swing.TimePicker tmreloj;
    private javax.swing.JTextArea txadescripcion;
    private javax.swing.JTextField txtcalle;
    private javax.swing.JTextField txtciudad;
    private javax.swing.JTextField txtfinal;
    private javax.swing.JTextField txtinicio;
    private javax.swing.JTextField txtnombre;
    private javax.swing.JLabel txtorga;
    // End of variables declaration//GEN-END:variables
}
