/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfases;

import Clases.Departamento;
import Clases.Evento;
import Clases.Organizador;
import Clases.Patrocinador;
import Clases.Personal;
import Clases.Tipo_evento;
import Clases.Tipos_Personales;
import Clases.Validaciones;
import com.db4o.Db4o;
import com.db4o.ObjectContainer;
import com.db4o.ObjectSet;
import com.db4o.query.Query;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author eliza
 */
public class Cruds_Personal extends javax.swing.JPanel {

    private TableRowSorter trs;
    String sexo;

    /**
     * Creates new form Cruds_Personal
     */
    public Cruds_Personal() {
        initComponents();
        ObjectContainer base = Db4o.openFile(Inicio.direccion);

        cargarTabla(base);

        base.close();
        Agrupar();
        cargarDepartamentos();
        cargarTipoPersonal();
        cargar();
    }

    public static ArrayList<Personal> listaagentes = new ArrayList<>();

    public static ArrayList<Personal> codigoseliminados = new ArrayList<>();

    public void Agrupar() {
        ButtonGroup botones = new ButtonGroup();
        botones.add(rbfemeninoPro);
        botones.add(rbmasculinoPro);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        botones = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        fechanac = new com.toedter.calendar.JDateChooser();
        txtemail = new javax.swing.JTextField();
        txttelefono = new javax.swing.JTextField();
        txtapellido = new javax.swing.JTextField();
        txtnombre = new javax.swing.JTextField();
        CedulaPersonal = new javax.swing.JTextField();
        txtdireccion = new javax.swing.JTextField();
        rbmasculinoPro = new javax.swing.JRadioButton();
        rbfemeninoPro = new javax.swing.JRadioButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtcelular = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jComboBoxevento = new javax.swing.JComboBox<>();
        jComboBoxdepartamento = new javax.swing.JComboBox<>();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        txtcodigopersonal = new javax.swing.JLabel();
        txttipopersonal = new javax.swing.JComboBox<>();
        jButton8 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel16 = new javax.swing.JLabel();
        cboxbusqueda = new javax.swing.JComboBox<>();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/humano.png"))); // NOI18N
        jLabel1.setText("PERSONAL");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(401, 6, -1, -1));

        jLabel2.setText("Cédula: ");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 92, -1, -1));

        jLabel3.setText("Nombre: ");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 135, -1, -1));

        jLabel5.setText("Apellido:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 182, -1, -1));

        jLabel6.setText("Teléfono: ");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 228, -1, -1));

        jLabel7.setText("Email: ");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 270, -1, -1));

        jLabel8.setText("Fecha de Nacimiento: ");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(401, 270, -1, -1));

        jLabel9.setText("Dirección: ");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 312, -1, -1));

        jLabel11.setText("Género: ");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 359, -1, -1));
        jPanel1.add(fechanac, new org.netbeans.lib.awtextra.AbsoluteConstraints(543, 262, 200, -1));

        txtemail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtemailActionPerformed(evt);
            }
        });
        jPanel1.add(txtemail, new org.netbeans.lib.awtextra.AbsoluteConstraints(136, 266, 200, -1));

        txttelefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txttelefonoKeyTyped(evt);
            }
        });
        jPanel1.add(txttelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(136, 224, 200, -1));

        txtapellido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtapellidoActionPerformed(evt);
            }
        });
        txtapellido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtapellidoKeyTyped(evt);
            }
        });
        jPanel1.add(txtapellido, new org.netbeans.lib.awtextra.AbsoluteConstraints(136, 178, 200, -1));

        txtnombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtnombreKeyTyped(evt);
            }
        });
        jPanel1.add(txtnombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(136, 131, 200, -1));

        CedulaPersonal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CedulaPersonalKeyTyped(evt);
            }
        });
        jPanel1.add(CedulaPersonal, new org.netbeans.lib.awtextra.AbsoluteConstraints(136, 88, 200, -1));

        txtdireccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtdireccionActionPerformed(evt);
            }
        });
        txtdireccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtdireccionKeyTyped(evt);
            }
        });
        jPanel1.add(txtdireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(136, 308, 200, -1));

        rbmasculinoPro.setText("Masculino");
        jPanel1.add(rbmasculinoPro, new org.netbeans.lib.awtextra.AbsoluteConstraints(136, 359, -1, -1));

        rbfemeninoPro.setText("Femenino");
        jPanel1.add(rbfemeninoPro, new org.netbeans.lib.awtextra.AbsoluteConstraints(259, 359, -1, -1));

        jLabel12.setText("Código Personal:");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(401, 92, -1, -1));

        jLabel13.setText("Tipo de Personal: ");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(401, 135, -1, -1));

        jLabel14.setText("Id Departamento: ");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(401, 182, -1, -1));

        jLabel15.setText("Celular:");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(401, 228, -1, -1));

        txtcelular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtcelularActionPerformed(evt);
            }
        });
        jPanel1.add(txtcelular, new org.netbeans.lib.awtextra.AbsoluteConstraints(543, 224, 200, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Cédula", "Nombre", "Apellido", "Teléfono", "Email", "Dirección", "Género", "Código Personal", "Tipo de Personal", "Departamento", "Contacto Adicional", "Fecha Nacimiento", "Cod Evento"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 468, 903, 163));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/disco-flexible.png"))); // NOI18N
        jButton1.setText("GUARDAR");
        jButton1.setToolTipText("GUARDAR PERSONAL BASE DE DATOS");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(195, 410, 136, -1));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/editar (1).png"))); // NOI18N
        jButton2.setText("MODIFICAR");
        jButton2.setToolTipText("MODIFICAR PERSONAL BASE DATOS");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(349, 410, -1, -1));

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/boton-eliminar (1).png"))); // NOI18N
        jButton3.setText("ELIMINAR");
        jButton3.setToolTipText("ELIMINAR PERSONAL BASE DATOS");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(488, 410, -1, -1));

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/curriculum.png"))); // NOI18N
        jButton4.setText("REPORTE");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(618, 410, -1, -1));

        jButton5.setBackground(new java.awt.Color(255, 255, 255));
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/busqueda (1)_1.png"))); // NOI18N
        jButton5.setBorder(null);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(354, 88, -1, -1));

        jLabel4.setText("Código Evento: ");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(401, 312, -1, -1));

        jComboBoxevento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxevento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBoxeventoMouseClicked(evt);
            }
        });
        jPanel1.add(jComboBoxevento, new org.netbeans.lib.awtextra.AbsoluteConstraints(543, 312, 200, -1));

        jComboBoxdepartamento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxdepartamento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBoxdepartamentoMouseClicked(evt);
            }
        });
        jPanel1.add(jComboBoxdepartamento, new org.netbeans.lib.awtextra.AbsoluteConstraints(543, 177, 200, -1));

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/hpermetropia.png"))); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 170, 50, -1));

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/hpermetropia.png"))); // NOI18N
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 300, 50, -1));
        jPanel1.add(txtcodigopersonal, new org.netbeans.lib.awtextra.AbsoluteConstraints(543, 88, 165, 18));

        txttipopersonal.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        txttipopersonal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txttipopersonalMouseClicked(evt);
            }
        });
        jPanel1.add(txttipopersonal, new org.netbeans.lib.awtextra.AbsoluteConstraints(543, 130, 200, -1));

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/hpermetropia.png"))); // NOI18N
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 120, 50, -1));
        jPanel1.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 90, 180, 10));

        jLabel16.setText("Filtro de busqueda");
        jPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 20, -1, -1));

        cboxbusqueda.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "Cedula", "Nombre", "Apellido" }));
        cboxbusqueda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cboxbusquedaMouseClicked(evt);
            }
        });
        cboxbusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxbusquedaActionPerformed(evt);
            }
        });
        jPanel1.add(cboxbusqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 50, 130, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtapellidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtapellidoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtapellidoActionPerformed

    private void txtdireccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtdireccionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtdireccionActionPerformed

    private void txtcelularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtcelularActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtcelularActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        ObjectContainer base = Db4o.openFile(Inicio.direccion);

        ActualizarDatos(base);
        base.close();
    }//GEN-LAST:event_jButton2ActionPerformed
    private void mostrarDatosDepartamentos(ObjectContainer bases) {
        String nombreSeleccionada = jComboBoxdepartamento.getSelectedItem().toString();
        Query query = bases.query();
        query.constrain(Departamento.class);

        query.descend("id_departamento").constrain(nombreSeleccionada);
        ObjectSet<Departamento> result = query.execute();

        if (!result.isEmpty()) {
            Departamento pues = result.next();
            String mensaje = "Nombre: " + pues.getNombre() + "\n"
                    + "Descripcion: " + pues.getDescripcion();

            JOptionPane.showMessageDialog(this, mensaje, "Datos del Departamento", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "No hay puestos con información que mostrar.", "Departamentos no encontrados", JOptionPane.WARNING_MESSAGE);
        }
        bases.close();
    }
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        ObjectContainer bases = Db4o.openFile(Inicio.direccion);
        mostrarDatosDepartamentos(bases);
        bases.close();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed
    private void mostrarDatosEventos(ObjectContainer bases) {
        try {
            Object selectedItem = jComboBoxevento.getSelectedItem();

            if (selectedItem != null) {
                String cedulaSeleccionada = selectedItem.toString();

                Query query = bases.query();
                query.constrain(Evento.class);
                query.descend("cod_evento").constrain(cedulaSeleccionada);
                ObjectSet<Evento> result = query.execute();
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

                if (!result.isEmpty()) {
                    Evento patro = result.next();
                    String mensaje = "Codigo: " + patro.getCodigo_patrocinador() + "\n"
                            + "Nombre: " + patro.getNombre() + "\n"
                            + "Tipo: " + patro.getTipo() + "\n"
                            + "Fecha de Inicio: " + (patro.getFecha_inicio() != null ? sdf.format(patro.getFecha_inicio()) : "No disponible") + "\n"
                            + "Fecha de Fin: " + (patro.getFecha_fin() != null ? sdf.format(patro.getFecha_fin()) : "No disponible") + "\n"
                            + "Hora Inicio: " + patro.getHora_inicio() + "\n"
                            + "Hora Fin: " + patro.getHora_fin() + "\n"
                            + "Descripcion: " + patro.getDescripcion();

                    JOptionPane.showMessageDialog(this, mensaje, "Datos del Evento", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró un Evento con el codigo seleccionado.", "Evento no encontrado", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No se ha seleccionado ningún código.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al mostrar datos del Evento.", "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            bases.close();
        }
    }
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        ObjectContainer bases = Db4o.openFile(Inicio.direccion);
        mostrarDatosEventos(bases);
        bases.close();           // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        ObjectContainer base = Db4o.openFile(Inicio.direccion);

        String nombre = " ", apellido = " ", telefono = " ", email = " ", direccion = " ", genero = " ", codigopersoal = " ";
        String tipopersonal = " ", departamento = " ", contacto = " ", codigoevento = " ";
        Date fechanacimiento = null;

        int ed = 0;
        Query query = base.query();
        query.constrain(Personal.class);
        query.descend("cedula").constrain(CedulaPersonal.getText().trim());
        ObjectSet<Personal> result = query.execute();

        Object[][] data = new Object[result.size()][13];

        int i = 0;
        for (Personal personal1 : result) {
            data[i][0] = personal1.getCedula();
            data[i][1] = personal1.getNombre();
            data[i][2] = personal1.getApellido();
            data[i][3] = personal1.getTelefono();
            data[i][4] = personal1.getCorreo();
            data[i][5] = personal1.getDireccion();
            data[i][6] = personal1.getGenero();
            data[i][7] = personal1.getCodigo_perso();
            data[i][8] = personal1.getTipo_personal();
            data[i][9] = personal1.getDepartamento_p();
            data[i][10] = personal1.getCelular();
            data[i][11] = personal1.getFecchaNaci();
            data[i][12] = personal1.getCod_evento();

            i++;
        }

        jTable1.repaint();

        if (!result.isEmpty()) {
            //habiltarDatos();
            for (Personal personal11 : result) {
                nombre = personal11.getNombre();
                apellido = personal11.getApellido();
                telefono = personal11.getTelefono();
                email = personal11.getCorreo();
                direccion = personal11.getDireccion();
                genero = personal11.getGenero();
                codigopersoal = personal11.getCodigo_perso();
                tipopersonal = personal11.getTipo_personal();
                departamento = personal11.getDepartamento_p();

                contacto = personal11.getCelular();

                codigoevento = personal11.getCod_evento();

                fechanacimiento = personal11.getFecchaNaci();

            }

            txtnombre.setText(nombre.trim());
            txtapellido.setText(apellido.trim());
            txttelefono.setText(telefono.trim());
            txtemail.setText(email.trim());
            txtdireccion.setText(direccion.trim());
            if (genero.equalsIgnoreCase("Masculino")) {
                rbmasculinoPro.setSelected(true);
            } else if (genero.equalsIgnoreCase("Femenino")) {
                rbfemeninoPro.setSelected(true);
            }
            txtcodigopersonal.setText(codigopersoal.trim());
            txttipopersonal.setSelectedItem(tipopersonal.trim());
            jComboBoxdepartamento.setSelectedItem(departamento.trim());
            txtcelular.setText(contacto.trim());
            fechanac.setDate(fechanacimiento);
            jComboBoxevento.setSelectedItem(codigoevento.trim());

            //txtcodigoPropi.setText(cod.trim());
        } else {

            JOptionPane.showMessageDialog(null, "No se encontró ningúna Personal con la cedula ingresada");

        }

        base.close();


    }//GEN-LAST:event_jButton5ActionPerformed

    public boolean validarCampos() {
        Validaciones miValidaciones = new Validaciones();
        boolean ban_confirmar = true;

        if (CedulaPersonal.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese la cédula ");
            ban_confirmar = false;
        } else if (!miValidaciones.validarCedula(CedulaPersonal.getText())) {
            JOptionPane.showMessageDialog(this, "Cédula incorrecta. Ingrese de nuevo");
            ban_confirmar = false;
        }

        if (txtnombre.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese el nombre ");
            ban_confirmar = false;
        } else if (!miValidaciones.ValidarNomApe(txtnombre.getText())) {
            JOptionPane.showMessageDialog(this, "Nombre incorrecto. Ingrese de nuevo");
            ban_confirmar = false;
        }

        if (txtapellido.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese el apellido ");
            ban_confirmar = false;
        } else if (!miValidaciones.ValidarNomApe(txtapellido.getText())) {
            JOptionPane.showMessageDialog(this, "Apellido incorrecto. Ingrese de nuevo");
            ban_confirmar = false;
        }

        if (txttelefono.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese telefono ");
            ban_confirmar = false;
        } else if (!miValidaciones.validarTelefono(txttelefono.getText())) {
            JOptionPane.showMessageDialog(this, "Telefono incorrecto. Ingrese de nuevo");
            ban_confirmar = false;
        }

        if (txtemail.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese el correo ");
            ban_confirmar = false;
        } else if (!miValidaciones.ValidarCorreo(txtemail.getText())) {
            JOptionPane.showMessageDialog(this, "Correo incorrecto. Ingrese de nuevo");
            ban_confirmar = false;
        }

        if (txtdireccion.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese la Direccion");
            ban_confirmar = false;
        } else if (!miValidaciones.ValidarNomApe(txtdireccion.getText())) {
            JOptionPane.showMessageDialog(this, "Direccion incorrecta. Ingrese de nuevo");
            ban_confirmar = false;
        }

        // Validar otros campos aquí...
        if (txtcelular.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese el celular ");
            ban_confirmar = false;
        } else if (!miValidaciones.validarCedula(txtcelular.getText())) {
            JOptionPane.showMessageDialog(this, "Celular incorrecto. Ingrese de nuevo");
            ban_confirmar = false;
        }
        if (fechanac.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Ingrese una Fecha");
            ban_confirmar = false;
        } else {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String fechaComoCadena = sdf.format(fechanac.getDate());

            if (!miValidaciones.validarFecha(fechaComoCadena)) {
                JOptionPane.showMessageDialog(this, "Fecha incorrecta. Ingrese de nuevo");
                ban_confirmar = false;
            }
        }

        return ban_confirmar;
    }

    public void deshabilitarParametros() {

        CedulaPersonal.setEnabled(false);
        txtnombre.setEnabled(false);
        txtapellido.setEnabled(false);
        txttelefono.setEnabled(false);
        txtemail.setEnabled(false);
        txtdireccion.setEnabled(false);
        txtcodigopersonal.setEnabled(false);
        txttipopersonal.setEnabled(false);
        txtcelular.setEnabled(false);
        jComboBoxdepartamento.setEnabled(false);
        fechanac.setEnabled(false);
        jComboBoxevento.setEnabled(false);
        rbmasculinoPro.setEnabled(false);
        rbfemeninoPro.setEnabled(false);

    }

    private void habilitarCamposBusqueda(String criterioSeleccionado) {

        // Deshabilitar todos los campos de búsqueda
        deshabilitarParametros();
        // ...

        // Habilitar el campo de búsqueda correspondiente al criterio seleccionado
        if (criterioSeleccionado.equals("Cedula")) {
            CedulaPersonal.setEnabled(true);
            limpiar();
        } else if (criterioSeleccionado.equals("Nombre")) {
            txtnombre.setEnabled(true);
            limpiar();
        } else if (criterioSeleccionado.equals("Apellido")) {
            txtapellido.setEnabled(true);
            limpiar();
        } else if (criterioSeleccionado.equals("Seleccione")) {
            CedulaPersonal.setEnabled(true);
            txtnombre.setEnabled(true);
            txtapellido.setEnabled(true);
            txttelefono.setEnabled(true);
            txtemail.setEnabled(true);
            txtdireccion.setEnabled(true);
            txtcodigopersonal.setEnabled(true);
            txttipopersonal.setEnabled(true);
            txtcelular.setEnabled(true);

        }

    }

    public void ActualizarDatos(ObjectContainer base) {
        // Verificar si todos los campos están llenos
        try {
            if (!validarCampos()) {
                JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (rbmasculinoPro.isSelected()) {
                sexo = "Masculino";
            } else if (rbfemeninoPro.isSelected()) {
                sexo = "Femenino";
            }

            // Obtener valores de los campos
            Personal micasa = new Personal(null, null, null, null, null, null, null, null, null, CedulaPersonal.getText().trim(), null, null, null, null, null, null, null, null);

            ObjectSet res = base.get(micasa);
            Personal micasita = (Personal) res.next();

            // Validar edad (mayor a 18 años)
            if (!esMayorDeEdad(fechanac.getDate())) {
                JOptionPane.showMessageDialog(this, "El personal debe ser mayor de 18 años.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Resto del código para actualizar otros campos del personal...
            micasita.setNombre(txtnombre.getText().trim());
            micasita.setApellido(txtapellido.getText().trim());
            micasita.setTelefono(txttelefono.getText().trim());
            micasita.setCorreo(txtemail.getText().trim());
            micasita.setTelefono(txttelefono.getText().trim());
            micasita.setDireccion(txtdireccion.getText().trim());
            micasita.setCodigo_perso(txtcodigopersonal.getText().trim());
            micasita.setTipo_personal(txttipopersonal.getSelectedItem().toString());
            micasita.setDepartamento_p(jComboBoxdepartamento.getSelectedItem().toString());
            micasita.setCelular(txtcelular.getText().trim());
            micasita.setFecchaNaci(fechanac.getDate());
            micasita.setCod_evento(jComboBoxevento.getSelectedItem().toString());
            micasita.setGenero(sexo);

            base.set(micasita);

            JOptionPane.showMessageDialog(this, "Modificación exitosa");
            limpiar();
            cargarTabla(base);
        } finally {
            base.close();
        }
    }

// Método para validar si la fecha de nacimiento indica que la persona es mayor de 18 años
    private boolean esMayorDeEdad(Date fechaNacimiento) {
        if (fechaNacimiento == null) {
            System.out.println("Fecha de nacimiento es nula");
            return false;
        }

        // Obtener la fecha actual
        LocalDate fechaActual = LocalDate.now();

        // Convertir la fecha de nacimiento a LocalDate
        LocalDate fechaNac = fechaNacimiento.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

        // Calcular la diferencia en años
        int edad = Period.between(fechaNac, fechaActual).getYears();

        // Verificar si la persona tiene al menos 18 años
        return edad >= 18;
    }


    private void txtemailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtemailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtemailActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        ObjectContainer base = Db4o.openFile(Inicio.direccion);
        boolean encontrado = false;
        Query query = base.query();
        query.constrain(Personal.class);
        query.descend("cedula").constrain(CedulaPersonal.getText().trim());
        ObjectSet<Personal> result = query.execute();
        cargarTabla(base);

        if (result.size() > 0) {
            encontrado = true;

            int resul = JOptionPane.showConfirmDialog(null, "Deseas eliminar los datos del Personal", "Confirmacion", JOptionPane.YES_NO_OPTION);

            if (resul == JOptionPane.YES_OPTION) {
                for (Personal departamentoDB : result) {

                    base.delete(departamentoDB);
                    JOptionPane.showMessageDialog(null, "Se están borrando los datos del Personal");
                    cargarTabla(base);
                }
            } else if (resul == JOptionPane.NO_OPTION) {
                JOptionPane.showMessageDialog(null, "Datos de la persona no eliminados");
            }
        }
        base.close();

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ObjectContainer base = Db4o.openFile(Inicio.direccion);

        crearPersonal(base);
        base.close();


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        ObjectContainer base = Db4o.openFile(Inicio.direccion);

        cargarTabla(base);

        base.close();


    }//GEN-LAST:event_jButton4ActionPerformed
    public void cargarDepartamentos() {
        ObjectContainer base = Db4o.openFile(Inicio.direccion);

        try {
            jComboBoxdepartamento.removeAllItems();
            Query query = base.query();
            query.constrain(Departamento.class);

            ObjectSet<Departamento> eventos = query.execute();

            jComboBoxdepartamento.addItem("Seleccione");
            while (eventos.hasNext()) {
                Departamento tipoEvento = eventos.next();
                jComboBoxdepartamento.addItem(tipoEvento.toString());
            }
        } finally {
            base.close();
        }
    }
    private void jComboBoxdepartamentoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxdepartamentoMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxdepartamentoMouseClicked

    public void cargar() {
        ObjectContainer base = Db4o.openFile(Inicio.direccion);

        try {
            jComboBoxevento.removeAllItems();
            Query query = base.query();
            query.constrain(Evento.class);

            ObjectSet<Evento> eventos = query.execute();

            jComboBoxevento.addItem("Seleccione");
            while (eventos.hasNext()) {
                Evento tipoEvento = eventos.next();
                jComboBoxevento.addItem(tipoEvento.toString());
            }
        } finally {
            base.close();
        }
    }
    private void jComboBoxeventoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxeventoMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxeventoMouseClicked

    private void txttipopersonalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txttipopersonalMouseClicked

    }//GEN-LAST:event_txttipopersonalMouseClicked

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        ObjectContainer base = Db4o.openFile(Inicio.direccion);
        mostrarDatosTipoPersonal(base);
        base.close();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void cboxbusquedaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cboxbusquedaMouseClicked

    }//GEN-LAST:event_cboxbusquedaMouseClicked

    private void cboxbusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxbusquedaActionPerformed

        // Obtener el criterio seleccionado del JComboBox
        String criterioSeleccionado = cboxbusqueda.getSelectedItem().toString();

        // Habilitar o deshabilitar los campos de búsqueda según el criterio seleccionado
        habilitarCamposBusqueda(criterioSeleccionado);
    }//GEN-LAST:event_cboxbusquedaActionPerformed

    public void Filtro() {

        if (cboxbusqueda.getSelectedItem().toString().equalsIgnoreCase("Cedula")) {
            int Columnastabla = 0;
            trs.setRowFilter(RowFilter.regexFilter(CedulaPersonal.getText().trim(), Columnastabla));

        } else if (cboxbusqueda.getSelectedItem().toString().equalsIgnoreCase("Nombre")) {
            int Columnastabla = 1;
            trs.setRowFilter(RowFilter.regexFilter(txtnombre.getText().trim(), Columnastabla));

        } else if (cboxbusqueda.getSelectedItem().toString().equalsIgnoreCase("Apellido")) {
            int Columnastabla = 2;
            trs.setRowFilter(RowFilter.regexFilter(txtapellido.getText().trim(), Columnastabla));

        }
    }


    private void CedulaPersonalKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CedulaPersonalKeyTyped
        if (cboxbusqueda.getSelectedItem().toString().equalsIgnoreCase("Cedula")) {

            CedulaPersonal.addKeyListener(new KeyAdapter() {
                @Override
                public void keyReleased(final KeyEvent e) {

                    String cadena = (CedulaPersonal.getText());

                    CedulaPersonal.setText(cadena);
                    Filtro();

                }
            });
        }
        trs = new TableRowSorter(jTable1.getModel());
        jTable1.setRowSorter(trs);
    }//GEN-LAST:event_CedulaPersonalKeyTyped

    
    
    private void txtnombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtnombreKeyTyped
        if (cboxbusqueda.getSelectedItem().toString().equalsIgnoreCase("Nombre")) {

            txtnombre.addKeyListener(new KeyAdapter() {
                @Override
                public void keyReleased(final KeyEvent e) {

                    String cadena = (txtnombre.getText());

                    txtnombre.setText(cadena);
                    Filtro();

                }
            });
        }
        trs = new TableRowSorter(jTable1.getModel());
        jTable1.setRowSorter(trs);

        char letra = evt.getKeyChar();

// Verificar si es una letra y si es la primera letra
        if (Character.isLetter(letra) && txtnombre.getText().trim().isEmpty()) {
            // Convertir la letra a mayúscula y agregarla al texto existente
            txtnombre.setText(String.valueOf(Character.toUpperCase(letra)));
            evt.consume();  // Consumir el evento para evitar que la letra original se muestre
        } else if (Character.isLetter(letra) || Character.isSpaceChar(letra)) {
            // Verificar si es letra o espacio y agregar al texto en minúscula
            txtnombre.setText(txtnombre.getText() + Character.toLowerCase(letra));
            evt.consume();
        } else {
            evt.consume();
        }

// Limitar la longitud del texto a 20 caracteres
        if (txtnombre.getText().length() > 19) {
            evt.consume();
        }

    }//GEN-LAST:event_txtnombreKeyTyped

    private void txtapellidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtapellidoKeyTyped
        if (cboxbusqueda.getSelectedItem().toString().equalsIgnoreCase("Apellido")) {

            txtapellido.addKeyListener(new KeyAdapter() {
                @Override
                public void keyReleased(final KeyEvent e) {

                    String cadena = (txtapellido.getText());

                    txtapellido.setText(cadena);
                    Filtro();

                }
            });
        }
        trs = new TableRowSorter(jTable1.getModel());
        jTable1.setRowSorter(trs);

        char letra = evt.getKeyChar();

// Verificar si es una letra y si es la primera letra
        if (Character.isLetter(letra) && txtapellido.getText().trim().isEmpty()) {
            // Convertir la letra a mayúscula y agregarla al texto existente
            txtapellido.setText(String.valueOf(Character.toUpperCase(letra)));
            evt.consume();  // Consumir el evento para evitar que la letra original se muestre
        } else if (Character.isLetter(letra) || Character.isSpaceChar(letra)) {
            // Verificar si es letra o espacio y agregar al texto en minúscula
            txtapellido.setText(txtapellido.getText() + Character.toLowerCase(letra));
            evt.consume();
        } else {
            evt.consume();
        }

// Limitar la longitud del texto a 20 caracteres
        if (txtapellido.getText().length() > 19) {
            evt.consume();
        }

    }//GEN-LAST:event_txtapellidoKeyTyped

    private void txtdireccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtdireccionKeyTyped
        char letra = evt.getKeyChar();

// Verificar si es una letra y si es la primera letra
        if (Character.isLetter(letra) && txtdireccion.getText().trim().isEmpty()) {
            // Convertir la letra a mayúscula y agregarla al texto existente
            txtdireccion.setText(String.valueOf(Character.toUpperCase(letra)));
            evt.consume();  // Consumir el evento para evitar que la letra original se muestre
        } else if (Character.isLetter(letra) || Character.isSpaceChar(letra)) {
            // Verificar si es letra o espacio y agregar al texto en minúscula
            txtdireccion.setText(txtdireccion.getText() + Character.toLowerCase(letra));
            evt.consume();
        } else {
            evt.consume();
        }

        if (txtdireccion.getText().length() > 19) {
            evt.consume();
        }
    }//GEN-LAST:event_txtdireccionKeyTyped

    private void txttelefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txttelefonoKeyTyped

        char c = evt.getKeyChar();
        if (!Character.isDigit(c) || txttelefono.getText().length() >= 7) {
            evt.consume();
        }
    }//GEN-LAST:event_txttelefonoKeyTyped

    public void crearPersonal(ObjectContainer base) {
        try {
            if (!validarCampos()) {
                JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!validarRadioButton(rbmasculinoPro, rbfemeninoPro)) {
                JOptionPane.showMessageDialog(null, "Por favor, selecciona una opción en el grupo de género", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            Query query = base.query();
            query.constrain(Personal.class);
            query.descend("codigo_perso").orderDescending();
            ObjectSet<Personal> result = query.execute();

            int ultimoCodigo = 1;
            if (!result.isEmpty()) {
                Personal ultimoPersonal = result.next();
                String codigoPersonal = ultimoPersonal.getCodigo_perso();
                String parteNumerica = codigoPersonal.substring(4);
                ultimoCodigo = Integer.parseInt(parteNumerica) + 1;
            }

            String nuevoCodigo = String.format("PER-%03d", ultimoCodigo);
            txtcodigopersonal.setText(nuevoCodigo);

            result = base.queryByExample(new Personal(nuevoCodigo, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null));

            if (!result.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Ya existe un personal con el código ingresado.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            result = base.queryByExample(new Personal(null, null, null, null, null, null, null, null, null,  CedulaPersonal.getText().trim(), null,null, null, null, null, null, null, null));

            if (!result.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Ya existe un personal con la cédula ingresada.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String codigoTipoPersonal = obtenerCodigoTipoPersonalSeleccionado();
            String codigoDepartamento = obtenerCodigoDepartamentoSeleccionado();
            String codigoEvento = obtenerCodigoEventoSeleccionado();

            if (rbmasculinoPro.isSelected()) {
                sexo = "Masculino";
            } else if (rbfemeninoPro.isSelected()) {
                sexo = "Femenino";
            }

            if (!esMayorDeEdad1(fechanac.getDate())) {
                JOptionPane.showMessageDialog(this, "El personal debe ser mayor de 18 años.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            Personal nuevoPersonal = new Personal(
                    nuevoCodigo,
                    codigoTipoPersonal,
                    codigoDepartamento,
                    null,
                    null,
                    null,
                    null,
                    null,
                    codigoEvento,
                    CedulaPersonal.getText().trim(),
                    txtnombre.getText().trim(),
                    txtapellido.getText().trim(),
                    txttelefono.getText().trim(),
                    txtemail.getText().trim(),
                    txtdireccion.getText().trim(),
                    txtcelular.getText().trim(),
                    fechanac.getDate(),
                    sexo
            );

            base.store(nuevoPersonal);

            JOptionPane.showMessageDialog(this, "Personal creado exitosamente");
            limpiar();
            cargarTabla(base);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error al obtener el último código de personal.", "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            base.close();
        }
    }

    private boolean validarRadioButton(JRadioButton... buttons) {
        for (JRadioButton button : buttons) {
            if (button.isSelected()) {
                return true;  
            }
        }
        return false;  
    }

    private String obtenerCodigoDepartamentoSeleccionado() {
        String departamentoSeleccionado = jComboBoxdepartamento.getSelectedItem().toString();

        // Asumiendo que el código del departamento está al principio del string antes del espacio
        String[] partes = departamentoSeleccionado.split(" ");

        if (partes.length > 0) {
            return partes[0];
        } else {
            return "";  // Ajusta esto según la estructura real de tu ComboBox
        }
    }

    private String obtenerCodigoTipoPersonalSeleccionado() {
        String tipoPersonalSeleccionado = txttipopersonal.getSelectedItem().toString();

        // Asumiendo que el código del tipo de personal está al principio del string antes del espacio
        String[] partes = tipoPersonalSeleccionado.split(" ");

        if (partes.length > 0) {
            return partes[0];
        } else {
            return "";  // Ajusta esto según la estructura real de tu ComboBox
        }
    }

    private String obtenerCodigoEventoSeleccionado() {
        String eventoSeleccionado = jComboBoxevento.getSelectedItem().toString();

        // Asumiendo que el código del evento está al principio del string antes del espacio
        String[] partes = eventoSeleccionado.split(" ");

        if (partes.length > 0) {
            return partes[0];
        } else {
            return "";  // Ajusta esto según la estructura real de tu ComboBox
        }
    }

// Método para validar si la fecha de nacimiento indica que la persona es mayor de 18 años
    private boolean esMayorDeEdad1(Date fechaNacimiento) {
        if (fechaNacimiento == null) {
            System.out.println("Fecha de nacimiento es nula");
            return false;
        }

        // Obtener la fecha actual
        LocalDate fechaActual = LocalDate.now();

        // Convertir la fecha de nacimiento a LocalDate
        LocalDate fechaNac = fechaNacimiento.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

        // Calcular la diferencia en años
        int edad = Period.between(fechaNac, fechaActual).getYears();

        // Verificar si la persona tiene al menos 18 años
        return edad >= 18;
    }

    public void limpiar() {
        CedulaPersonal.setText("");
        txtnombre.setText("");
        txtapellido.setText("");
        txttelefono.setText("");
        txtemail.setText("");
        txtdireccion.setText("");
        txtcodigopersonal.setText("");
        txttipopersonal.setSelectedItem("");
        txtcelular.setText("");
        //  txtcodigoPropi.setText(" ");
    }

    public void cargarTabla(ObjectContainer base) {

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Limpiar la tabla antes de cargar los datos

        ObjectSet<Personal> result = base.queryByExample(new Personal());
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

        while (result.hasNext()) {
            Personal personal1 = result.next();

            Object[] row = {
                personal1.getCedula(),
                personal1.getNombre(),
                personal1.getApellido(),
                personal1.getTelefono(),
                personal1.getCorreo(),
                personal1.getDireccion(),
                personal1.getGenero(),
                personal1.getCodigo_perso(),
                personal1.getTipo_personal(),
                personal1.getDepartamento_p(),
                personal1.getCelular(),
                personal1.getFecchaNaci() != null ? sdf.format(personal1.getFecchaNaci()) : null,
                personal1.getCod_evento()

            };
            model.addRow(row);
        }

    }

    public void cargarTipoPersonal() {
        ObjectContainer base = Db4o.openFile(Inicio.direccion);

        try {
            txttipopersonal.removeAllItems();
            Query query = base.query();
            query.constrain(Tipos_Personales.class);

            ObjectSet<Tipos_Personales> eventos = query.execute();

            txttipopersonal.addItem("Seleccione");
            while (eventos.hasNext()) {
                Tipos_Personales tipoEvento = eventos.next();
                txttipopersonal.addItem(tipoEvento.toString());
            }
        } finally {
            base.close();
        }
    }

    private void mostrarDatosTipoPersonal(ObjectContainer bases) {
        String nombreSeleccionada = txttipopersonal.getSelectedItem().toString();
        Query query = bases.query();
        query.constrain(Tipos_Personales.class);

        query.descend("id_tip_peronal").constrain(nombreSeleccionada);
        ObjectSet<Tipos_Personales> result = query.execute();

        if (!result.isEmpty()) {
            Tipos_Personales pues = result.next();
            String mensaje = "Nombre: " + pues.getNombre() + "\n"
                    + "Descripcion: " + pues.getDescripcion();

            JOptionPane.showMessageDialog(this, mensaje, "Datos del Tipo Personal", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "No hay Tipos de Personales con información que mostrar.", "Tipos Personales no encontrados", JOptionPane.WARNING_MESSAGE);
        }
        bases.close();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CedulaPersonal;
    private javax.swing.ButtonGroup botones;
    private javax.swing.JComboBox<String> cboxbusqueda;
    private com.toedter.calendar.JDateChooser fechanac;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JComboBox<String> jComboBoxdepartamento;
    private javax.swing.JComboBox<String> jComboBoxevento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable1;
    private javax.swing.JRadioButton rbfemeninoPro;
    private javax.swing.JRadioButton rbmasculinoPro;
    private javax.swing.JTextField txtapellido;
    private javax.swing.JTextField txtcelular;
    private javax.swing.JLabel txtcodigopersonal;
    private javax.swing.JTextField txtdireccion;
    private javax.swing.JTextField txtemail;
    private javax.swing.JTextField txtnombre;
    private javax.swing.JTextField txttelefono;
    private javax.swing.JComboBox<String> txttipopersonal;
    // End of variables declaration//GEN-END:variables
}
